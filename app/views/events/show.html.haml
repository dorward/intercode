%nav{'aria-label' => 'breadcrumb'}
  %ol.breadcrumb
    %li.breadcrumb-item
      - if can?(:schedule, convention) && @runs.any?
        = link_to 'Con schedule', "/events/schedule/#{@runs.first.starts_at.strftime('%A').downcase}"
      - else
        = link_to 'List of events', events_path
    %li.breadcrumb-item.active{'aria-current' => 'page'}
      = @event.title

.row
  .col-md-9
    %h1.larp-title= @event.title

    - form_item_identifiers = Set.new(@event.form.form_items.pluck(:identifier))

    %dl.row
      - if @event.author.present? && form_item_identifiers.include?('author')
        %dt.col-md-3 Author(s)
        %dd.col-md-9= @event.author
      - if @event.organization.present? && form_item_identifiers.include?('organization')
        %dt.col-md-3 Organization
        %dd.col-md-9= @event.organization
      - if @event.url.present? && form_item_identifiers.include?('url')
        %dt.col-md-3 Home Page
        %dd.col-md-9= link_to @event.url, @event.url, :target => '_blank'
      - if @event.email.present? && (form_item_identifiers.include?('email') || form_item_identifiers.include?('event_email'))
        %dt.col-md-3 Contact Email
        %dd.col-md-9= intercode_mail_to @event.email
      - if @team_members.any?
        %dt.col-md-3= @event.team_member_name.titleize.pluralize
        %dd.col-md-9
          %ul.list-unstyled
            - @team_members.each do |team_member|
              %li
                = team_member.user.name
                - if team_member.email
                  (#{intercode_mail_to team_member.email})

  .col-md-3
    - if can? :edit, @event
      .card
        .card-header
          Event Admin
        %ul.list-group.list-group-flush
          %li.list-group-item
            = link_to('Edit Event', [:edit, @event])
          %li.list-group-item
            = link_to("Edit #{@event.team_member_name.titleize.pluralize}", [@event, :team_members])

- if @runs.any? && can?(:schedule, convention) && @event.registration_policy&.accepts_signups?
  %section.my-4
    %hr

    - signup_options_presenter = SignupOptionsPresenter.new(event: @event, user_con_profile: user_con_profile)

    .d-flex.flex-wrap.justify-content-center
      - @runs.sort_by(&:starts_at).each do |run|
        - my_signup = signup_options_presenter.user_signup_for_run(run)
        .col-lg-4.col-md-6.col-sm-12
          .card.mb-3
            .card-header
              - if run.title_suffix.present?
                %p
                  %strong= run.title_suffix

              #{run.starts_at.strftime("%a %l:%M%P")}-#{run.ends_at.strftime("%l:%M%P")}
              %br
              = run.rooms.map(&:name).sort.join(", ")

            .card-body.text-center
              - count_presenter = SignupCountPresenter.new(run)
              = render 'run_capacity_graph', count_presenter: count_presenter

              - if my_signup
                %p
                  - if my_signup.confirmed?
                    %em You are signed up.
                  - else
                    - ahead_of_me = run.signups.select { |signup| signup.waitlisted? && signup.created_at < my_signup.created_at }
                    %em You are ##{ahead_of_me.size + 1} on the waitlist.

                %p= link_to "Withdraw", [@event, run, :user_signup], class: 'btn btn-outline-danger', method: "DELETE", "data-confirm" => "Are you sure you want to withdraw from #{@event.title}?"
              - else
                - no_preference_options, preference_options = signup_options_presenter.signup_options_for_run(run).partition(&:no_preference?)
                .d-flex.flex-wrap.justify-content-center
                  - preference_options.each do |signup_option|
                    = signup_button(@event, run, signup_option)
                .d-flex.flex-wrap.justify-content-center
                  - no_preference_options.each do |signup_option|
                    = signup_button(@event, run, signup_option)

            - aux_signup_options = signup_options_presenter.auxiliary_signup_options_for_run(run)
            - if aux_signup_options.any?
              %ul.list-group.list-group-flush
                %li.list-group-item.border-bottom-0
                  .d-flex.flex-wrap.justify-content-center
                    - aux_signup_options.each do |signup_option|
                      = signup_button(@event, run, signup_option)

            - if can? :read, run.signups.new
              .card-footer.text-center
                = link_to('View signups', event_run_admin_signups_path(@event, run, 'filters.state' => 'confirmed,waitlisted', 'sort.id' => 'asc'))
                - if can? :signup_summary, run
                  %br
                  = link_to('Attendee-facing signup summary', [:signup_summary, @event, run])
            - elsif can? :signup_summary, run
              .card-footer.text-center= link_to('View signups', [:signup_summary, @event, run])
- elsif @event.registration_policy.slots_unlimited? || @event.registration_policy.total_slots > 0
  / hacky AF: show a fake registration graph instead of actual runs of the event, so that users
  / can see the capacity of the event
  %section.my-4
    %hr
      .d-flex.flex-wrap.justify-content-center
        .col-lg-4.col-md-6.col-sm-12
          - count_presenter = SignupCountPresenter.new(OpenStruct.new(registration_policy: @event.registration_policy, signups: []), signups_available: false)
          = render 'run_capacity_graph', count_presenter: count_presenter

%section.my-4
  %hr

  = MarkdownPresenter.new('No description provided').render @event.description

- %w[content_warnings age_restrictions participant_communications].each do |field|
  - value = @event.public_send(field)
  - if value.present?
    %hr

    %section.my-4
      %h4= field.humanize

      = MarkdownPresenter.new('No information provided').render value
